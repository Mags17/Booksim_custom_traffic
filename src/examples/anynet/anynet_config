// $Id: singleconfig 1535 2009-09-16 16:21:01Z dub $

// Copyright (c) 2007-2009, Trustees of The Leland Stanford Junior University
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions are met:
// 
// Redistributions of source code must retain the above copyright notice, this 
// list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, 
// this list of conditions and the following disclaimer in the documentation 
// and/or other materials provided with the distribution.
// Neither the name of the Stanford University nor the names of its contributors
// may be used to endorse or promote products derived from this software without
// specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
// POSSIBILITY OF SUCH DAMAGE.

//A single cross 10X10 cross bar under injection mode


o/ Flow control
// Total number of VCs must match the above assignments
num_vcs     = 8;
vc_buf_size = 4;

wait_for_tail_credit = 0;

//
// Router architectureq
//
vc_allocator = separable_input_first; 
sw_allocator = separable_input_first;
alloc_iters  = 1;

//credit_delay   = 2;
credit_delay   = 1;
routing_delay  = 0;
vc_alloc_delay = 1;
sw_alloc_delay = 1;
st_final_delay = 1;

input_speedup     = 1;
output_speedup    = 1;
internal_speedup  = 1.0;

//
// Traffic
//

warmup_periods = 3;

sample_period  = 1000;  

sim_count          = 1;

traffic       = uniform;


// Flatfly 
//
// #node = k^(n+1)
//
// x, y, specifies the arrangement of routers in x and y dim
// xr, yr specifiies the arayment of clients in a router
//
topology = anynet;
network_file = network_12;

//
// Routing
//

routing_function = min;


//1: batch mode, 0: injection mode
use_read_write = 0;

//for injection mode
packet_size = 1;
injection_rate = 0.5;
injection_process = bernoulli;

//for batch mode
read_request_size=1;
write_request_size=1;
read_reply_size=1;
write_reply_size=1;

read_request_begin_vc  = 0;
read_request_end_vc    = 3;
write_reply_begin_vc   = 4;
write_reply_end_vc     = 7;
read_reply_begin_vc    = 4;
read_reply_end_vc      = 7;
write_request_begin_vc = 0;
write_request_end_vc   = 3;

//latency: drains all packet, throughput:no drain?
sim_type = latency;


